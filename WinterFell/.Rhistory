library(XLConnect)
tq_index(x = 'RUSSELL1000')
tq_index(x = 'RUSSELL3000')
tq_index(x = 'RUSSELL2000')
tq_index(x = 'RUSSELL20000'
)
tq_exchange('NYSE')
library(tidyquant)
library(quantmod)
rollapply(data = rnorm(1000),sd)
rollapply(data = rnorm(1000),width = 30, FUN = sd)
getSymbols('TSLA')
rollapply(data = TSLA[,6] ,width = 30, FUN = sd)
rollingSD = rollapply(data = TSLA[,6] ,width = 30, FUN = sd)
plot.xts(rollingSD)
plot.xts(rollingSD[2018::])
plot.xts(rollingSD['2018'])
dailyReturn(TSLA[,6])
dr = dailyReturn(TSLA[,6])
rollingSD = rollapply(data = dr ,width = 30, FUN = sd)
plot.xts(rollingSD['2018'])
library(quantmod)
## last 15 days
startDate  = Sys.Date() - 15
stock = getSymbols('TSLA', from  = startDate,auto.assign = F)
dr = dailyReturn(stock[,6])
updwn = ifelse(dr > 0 , 1, 0)
updwn
updwn = as.data.frame(ifelse(dr > 0 , 1, 0))
updwn
updwn$date = rownames(updwn)
updwn
ggplot(updwn, aes(x = date,y = daily.returns, fill = factor(daily.returns)) + geom_bar(stat = 'identity')
ggplot(updwn, aes(x = date,y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity')
library(ggplot2)
ggplot(updwn, aes(x = date,y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity')
updwn = as.data.frame(factor(ifelse(dr > 0 , 1, -1)))
updwn$date = rownames(updwn)
ggplot(updwn, aes(x = date,y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity')
updwn = as.data.frame(factor(ifelse(dr > 0 , 1, -1)))
updwn
updwn = as.data.frame(daily.returns = factor(ifelse(dr > 0 , 1, -1)))
updwn = data.frame(daily.returns = factor(ifelse(dr > 0 , 1, -1)))
updwn
updwn = as.data.frame(ifelse(dr > 0 , 1, -1))
updwn$date = rownames(updwn)
ggplot(updwn, aes(x = date,y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity')
updwn = as.data.frame(ifelse(dr > 0 , 1, 0.5))
updwn$date = rownames(updwn)
ggplot(updwn, aes(x = date,y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity')
## last 15 days
startDate  = Sys.Date() - 30
stock = getSymbols('TSLA', from  = startDate,auto.assign = F)
dr = dailyReturn(stock[,6])
updwn = as.data.frame(ifelse(dr > 0 , 1, 0.5))
updwn$date = rownames(updwn)
ggplot(updwn, aes(x = date,y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity')
pracma::clear()
library(quantmod)
library(ggplot2)
## last 15 days
startDate  = Sys.Date() - 30
stock = getSymbols('TSLA', from  = startDate,auto.assign = F)
dr = dailyReturn(stock[,6])
updwn = as.data.frame(ifelse(dr > 0 , 1, 0.5))
updwn
updwn$date = rownames(updwn)
ggplot(updwn, aes(x = date,y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity')
ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity')
ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(guides = F)
ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(legend.position='none')
library(quantmod)
tt = getSymbols('AVGO', auto.assign = F)
library(TTR)
RSI(tt[,6])
tail(RSI(tt[,6]))
plot(RSI(tt[,6]))
plot(RSI(tt[,6]['2018::']))
plot(RSI(tt[,6]['1 month']))
plot(RSI(tt[,6]['last 2 weeks']))
plot(RSI(tt[,6]['2018::']))
library(dygraphs)
library(quantmod)
library(TTR)
library(dygraphs)
FetchRSIPlot(symbol = NULL, timeexp = '2018::')
{
price = getSymbols(symbol, auto,auto.assign = F)[,6][timeexp]
rsi = RSI(price)
dygraphs::dygraph(rsi) %>% dyRangeSelector()
}
library(quantmod)
library(TTR)
library(dygraphs)
FetchRSIPlot(symbol = NULL, timeexp = '2018::')
{
price = getSymbols(symbol,auto.assign = F)[,6][timeexp]
rsi = RSI(price)
dygraphs::dygraph(rsi) %>% dyRangeSelector()
}
library(quantmod)
library(TTR)
library(dygraphs)
FetchRSIPlot <- function(symbol = NULL, timeexp = '2018::')
{
price = getSymbols(symbol,auto.assign = F)[,6][timeexp]
rsi = RSI(price)
dygraphs::dygraph(rsi) %>% dyRangeSelector()
}
FetchRSIPlot('AAPL',timeexp = '2017::')
library(quantmod)
library(TTR)
library(dygraphs)
FetchRSIPlot <- function(symbol = NULL, timeexp = '2018::')
{
price = getSymbols(symbol,auto.assign = F)[,6][timeexp]
rsi = RSI(price)
dygraphs::dygraph(rsi) %>% dyRangeSelector()
}
library(flexdashboard)
library(tidyquant)
library(TTR)
library(quantmod)
tq_index()
tq_index(x = 'SP')
constituents = c('RUSSELL1000', 'RUSSELL2000', 'RUSSELL3000', 'DOW', 'SP500')
allindex = lapply(constituents, tq_index)
library(data.table)
allindex
allIndex = rbindlist(allindex)
allIndex
setkey(allindex, symbol)
allIndex = data.table(rbindlist(allindex))
setkey(allindex, symbol)
setkey(allIndex, symbol)
unique(allIndex)
unique(allIndex)
setkey(allIndex, 'symbol')
unique(allIndex)
allIndex$symbol  = as.character(allIndex$symbol)
setkey(allIndex, 'symbol')
unique(allIndex)
duplicated(allIndex)
str(allIndex)
duplicated(allIndex$symbol)
allIndex[duplicated(allIndex$symbol),]
key(allIndex)
duplicated(allIndex, by = 'symbol')
sum(duplicated(allIndex, by = 'symbol'))
unique(allIndex)
lapply(allindex, nrow)
allIndex = data.table(rbindlist(allindex))
allIndex$symbol  = as.character(allIndex$symbol)
setkey(allIndex, 'symbol')
allIndex
setkey(allIndex, 'symbol','company')
unique(allIndex)
unique(allIndex$symbol)
duplicated(allIndex)
duplicate(allIndex)
duplicated(allIndex[,symbol, company])
allIndex[,symbol, company]
duplicated(allIndex[,symbol, company])
indexConstituents = duplicated(allIndex[,symbol, company])
nrow(indexConstituents)
indexConstituents
indexConstituents = allIndex[duplicated(allIndex[,symbol, company])]
nrow(indexConstituents)
setwd("R/")
saveRDS(indexConstituents, 'indexConstituents.rds')
symbols = indexConstituents$symbol
symbols
tt = getSymbols('AAPL', auto.assign = F)
head(tt)
volume = priceHist[,5]
priceHist = getSymbols('AAPL', auto.assign = F)
closePrice = priceHist[,6]
volume = priceHist[,5]
head(closePrice)
head(volume)
monthRet  =  tail(round(monthlyReturn(closePrice)*100,2),1)
weeklyRet =  tail(round(weeklyRet(closePrice)*100,2),1)
dailyRet  =  tail(round(dailyRet(closePrice)*100,2),1)
weeklyRet =  tail(round(weeklyReturn(closePrice)*100,2),1)
dailyRet  =  tail(round(dailyReturn(closePrice)*100,2),1)
closingPrice = round(tail(closePrice,1),2)
ma50 = round(tail(SMA(closePrice, n = 50),1),2)
ma200 = round(tail(SMA(closePrice, n = 200),1))
dailyRet
monthRet  =  as.numeric(tail(round(monthlyReturn(closePrice)*100,2),1))
monthRet
closingPrice
monthRet  =  as.numeric(tail(round(monthlyReturn(closePrice)*100,2),1))
weeklyRet = as.numeric( tail(round(weeklyReturn(closePrice)*100,2),1))
dailyRet  = as.numeric( tail(round(dailyReturn(closePrice)*100,2),1))
closingPrice = as.numeric(round(tail(closePrice,1),2))
ma50 = as.numeric(round(tail(SMA(closePrice, n = 50),1),2))
ma200 = as.numeric(round(tail(SMA(closePrice, n = 200),1)))
dailyRet
formatC(dailyRet, digits = 3, format = "f")
# constituents = c('RUSSELL1000', 'RUSSELL2000', 'RUSSELL3000', 'DOW', 'SP500')
# allindex = lapply(constituents, tq_index)
#
# allIndex = data.table(rbindlist(allindex))
# allIndex$symbol  = as.character(allIndex$symbol)
# indexConstituents = allIndex[duplicated(allIndex[,symbol, company])]
# saveRDS(indexConstituents, 'indexConstituents.rds')
indexConstituents = readRDS('indexConstituents.rds')
setwd("R/")
# constituents = c('RUSSELL1000', 'RUSSELL2000', 'RUSSELL3000', 'DOW', 'SP500')
# allindex = lapply(constituents, tq_index)
#
# allIndex = data.table(rbindlist(allindex))
# allIndex$symbol  = as.character(allIndex$symbol)
# indexConstituents = allIndex[duplicated(allIndex[,symbol, company])]
# saveRDS(indexConstituents, 'indexConstituents.rds')
indexConstituents = readRDS('indexConstituents.rds')
sum(is.na(symbols))
head(symbols)
head(symbols)
tickr = indexConstituents$symbol
head(tickr)
which(tickr == "")
sort(tickr,decreasing = T)
tickr = sort(indexConstituents$symbol, decreasing = T)
tickr[1]
tickr = sort(indexConstituents$symbol, decreasing = F)
tickr[1]
indexConstituents[1]
# constituents = c('RUSSELL1000', 'RUSSELL2000', 'RUSSELL3000', 'DOW', 'SP500')
# allindex = lapply(constituents, tq_index)
#
# allIndex = data.table(rbindlist(allindex))
# allIndex$symbol  = as.character(allIndex$symbol)
# indexConstituents = allIndex[duplicated(allIndex[,symbol, company])]
# saveRDS(indexConstituents, 'indexConstituents.rds')
indexConstituents = readRDS('indexConstituents.rds')
head(indexConstituents)
head(indexConstituents,10)
constituents = c('RUSSELL1000', 'RUSSELL2000', 'RUSSELL3000', 'DOW', 'SP500')
allindex = lapply(constituents, tq_index)
library(flexdashboard)
library(tidyquant)
library(TTR)
library(quantmod)
library(data.table)
library(dygraphs)
constituents = c('RUSSELL1000', 'RUSSELL2000', 'RUSSELL3000', 'DOW', 'SP500')
allindex = lapply(constituents, tq_index)
allIndex = data.table(rbindlist(allindex))
allIndex$symbol  = as.character(allIndex$symbol)
indexConstituents = allIndex[duplicated(allIndex[,symbol, company])]
allIndex$symbol  = as.character(allIndex$symbol)
indexConstituents = allIndex[!duplicated(allIndex[,symbol, company])]
head(indexConstituents,10)
allIndex
unique(allIndex)
indexConstituents[symbol == 'A']
indexConstituents[symbol == 'AAL']
# constituents = c('RUSSELL1000', 'RUSSELL2000', 'RUSSELL3000', 'DOW', 'SP500')
# allindex = lapply(constituents, tq_index)
#
# allIndex = data.table(rbindlist(allindex))
# allIndex$symbol  = as.character(allIndex$symbol)
# indexConstituents = allIndex[!duplicated(allIndex[,symbol, company])]
# saveRDS(indexConstituents, 'indexConstituents.rds')
indexConstituents = readRDS('indexConstituents.rds')
tickr = sort(indexConstituents$symbol, decreasing = F)
?dySer
?dySeries
??dySeries
library(quantmod)
tt = getSymbols('TTD', auto.assign = F)
options("getSymbols.yahoo.warning"=FALSE)
tt
tt = tt[complete.cases(tt),]
tt
library(dygraphs)
??dyBarSeries
??dyFilledLines
install.packages('dygraphs')
install.packages("dygraphs")
library(dygraphs)
??dyBarSeries
dyBarChart <- function(dygraph) {
dyPlotter(dygraph = dygraph,
name = "BarChart",
path = system.file("plotters/barchart.js",
package = "dygraphs"))
}
library(quantmod)
library(ggplot2)
## last 15 days
startDate  = Sys.Date() - 30
stock = getSymbols('TSLA', from  = startDate,auto.assign = F)
dr = dailyReturn(stock[,6])
updwn = as.data.frame(ifelse(dr > 0 , 1, 0.5))
updwn$date = rownames(updwn)
ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(legend.position='none')
dr = dailyReturn(stock[,6])
updwn = as.data.frame(ifelse(dr > 0 , 1, -1))
updwn$date = rownames(updwn)
ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(legend.position='none')
p1 = ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(legend.position='none')
library(plotly)
ggplotly(p1)
p1 = ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(legend.position='none') +
xlab('Last 30 days') + ylab('Up Down Counter') + ylim(-5,5)
ggplotly(p1)
p1 = ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(legend.position='none') +
xlab('Last 30 days') + ylab('Up Down Counter') + ylim(-3,3)
ggplotly(p1)
p1 = ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(legend.position='none') +
xlab('Last 30 days') + ylab('Up Down Counter') + ylim(-2,2)
ggplotly(p1)
dr = round(dailyReturn(closePrice)*100,2)
priceHist = getSymbols('TSLA', auto.assign = F)
closePrice = priceHist[,6]
volume = priceHist[,5]
dr = round(dailyReturn(closePrice)*100,2)
monthRet  =  as.numeric(tail(round(monthlyReturn(closePrice)*100,2),1))
weeklyRet = as.numeric( tail(round(weeklyReturn(closePrice)*100,2),1))
dailyRet  = as.numeric( tail(dr,1))
closingPrice = as.numeric(round(tail(closePrice,1),2))
## Technical Analysis
ma50 = as.numeric(round(tail(SMA(closePrice, n = 50),1),2))
ma200 = as.numeric(round(tail(SMA(closePrice, n = 200),1)))
##updownind
posnegCount = ifelse(dr > 0 , "Up", "Down")
posnegCount
##updownind
priceHist$posnegCount = ifelse(dr > 0 , "Up", "Down")
priceHist
##updownind
priceHist$posnegCount = ifelse(dr > 0 , 1, -1)
priceHist
temp = data.frame(tail(priceHist, 30))
temp
temp %>% group_by(posnegCount) %>% summarise(TotalVol = sum(TSLA.Volume))
temp = temp %>% group_by(posnegCount) %>% summarise(TotalVol = sum(TSLA.Volume, na.rm = T))
temp
temp %>% group_by(posnegCount) %>% summarise(TotalVol = sum(TSLA.Volume, na.rm = T)) %>% arrange(TotalVol)
temp = data.frame(tail(priceHist, 30))
temp = temp %>% group_by(posnegCount) %>% summarise(TotalVol = sum(TSLA.Volume, na.rm = T)) %>% arrange(TotalVol)
temp
temp$TotalVol[1] / temp$TotalVol[2]
## RSI
TTR::RSI(price = closePrice,n = 14)
## RSI
RSI =  as.numeric(taiL(TTR::RSI(price = closePrice,n = 14),1))
## RSI
RSI =  as.numeric(tail(TTR::RSI(price = closePrice,n = 14),1))
RSI
library(TTR)
volatility(OHLC = priceHist)
volatility(OHLC = priceHist, n = 260)
plot(volatility(OHLC = priceHist, n = 260))
plot(volatility(OHLC = priceHist, n = 252))
plot(volatility(OHLC = priceHist, n = 30))
volatility
## last 15 days
startDate  = Sys.Date() - 30
stock = getSymbols('TSLA', from  = startDate,auto.assign = F)
dr = dailyReturn(stock[,6])
updwn = as.data.frame(ifelse(dr > 0 , 1, -1))
updwn$date = rownames(updwn)
p1 = ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(legend.position='none') +
xlab('Last 30 days') + ylab('Up Down Counter') + ylim(-2,2)
ggplotly(p1)
updwn
str(updwn)
library(quantmod)
library(ggplot2)
library(plotly)
## last 15 days
startDate  = Sys.Date() - 30
stock = getSymbols('TSLA', from  = startDate,auto.assign = F)
dr = dailyReturn(stock[,6])
updwn = as.data.frame(ifelse(dr > 0 , 1, -1))
updwn$date = rownames(updwn)
p1 = ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(legend.position='none') +
xlab('Last 30 days') + ylab('Up Down Counter') + ylim(-2,2)
plotly(p1)
stock = getSymbols('TSLA', from  = startDate,auto.assign = F)
dr = dailyReturn(stock[,6])
updwn = as.data.frame(ifelse(dr > 0 , 1, -1))
updwn$date = rownames(updwn)
p1 = ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(legend.position='none') +
xlab('Last 30 days') + ylab('Up Down Counter') + ylim(-2,2)
plotly(p1)
stock = getSymbols('TSLA', from  = startDate,auto.assign = F)
dr = dailyReturn(stock[,6])
dr
updwn = as.data.frame(ifelse(dr > 0 , 1, -1))
updwn
updwn$date = rownames(updwn)
str(updwn)
stock = getSymbols('TSLA', from  = startDate,auto.assign = F)
dr = dailyReturn(stock[,6])
updwn = as.data.frame(ifelse(dr > 0 , 1, -1))
updwn$date = rownames(updwn)
p1 = ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(legend.position='none') +
xlab('Last 30 days') + ylab('Up Down Counter') + ylim(-2,2)
plotly(p1)
library(quantmod)
library(ggplot2)
library(plotly)
## last 15 days
startDate  = Sys.Date() - 30
stock = getSymbols('TSLA', from  = startDate,auto.assign = F)
dr = dailyReturn(stock[,6])
updwn = as.data.frame(ifelse(dr > 0 , 1, -1))
updwn$date = rownames(updwn)
p1 = ggplot(updwn, aes(x = as.Date(date),y = daily.returns, fill = factor(daily.returns))) +
geom_bar(stat = 'identity') + theme(legend.position='none') +
xlab('Last 30 days') + ylab('Up Down Counter') + ylim(-2,2)
ggplotly(p1)
library(tidyquant)
library(quantmod)
library(TTR)
stock = getSymbols('TSLA', auto.assign = F)
stock[,5]
tail(stock[,5])
tail(stock[,5], 30)
slope(tail(stock[,5], 30))
? slope
?? slope
lm(tail(stock[,5], 30) ~ c(1:30))
plot(tail(stock[,5], 30))
lm(tail(stock[,5], 30) ~ c(1:30))
lm(tail(stock[,5], 30) ~ c(1:30))$coefficients
library(TTR)
tt
stock
TTR::runSD(stock, 30)
TTR::runSD(stock[,6], 30)
tail(TTR::runSD(stock[,6], 30),1)
tail(TTR::runSD(stock[,6], 30),1)/tail(TTR::runSD(stock[,6], 30),1)
tail(TTR::runSD(stock[,6], 10),1)/tail(TTR::runSD(stock[,6], 30),1)
# constituents = c('RUSSELL1000', 'RUSSELL2000', 'RUSSELL3000', 'DOW', 'SP500')
# allindex = lapply(constituents, tq_index)
#
# allIndex = data.table(rbindlist(allindex))
# allIndex$symbol  = as.character(allIndex$symbol)
# indexConstituents = allIndex[!duplicated(allIndex[,symbol, company])]
# saveRDS(indexConstituents, 'indexConstituents.rds')
indexConstituents = readRDS('indexConstituents.rds')
# constituents = c('RUSSELL1000', 'RUSSELL2000', 'RUSSELL3000', 'DOW', 'SP500')
# allindex = lapply(constituents, tq_index)
#
# allIndex = data.table(rbindlist(allindex))
# allIndex$symbol  = as.character(allIndex$symbol)
# indexConstituents = allIndex[!duplicated(allIndex[,symbol, company])]
# saveRDS(indexConstituents, 'indexConstituents.rds')
indexConstituents = readRDS('R/indexConstituents.rds')
head(indexConstituents)
quantmod::getDividends('AAPL')
tq_get(x = 'AAPL', get ='key.ratios')
library(tidyquant)
symbol = 'AAPL'
div = getDividends(symbol)
financials = tq_get(x = symbol , get = 'financials')
keyratios = tq_get(x = symbol , get = 'key.ratios')
dividends = tq_get(x = symbol, get ='dividends')
keyratios
keyratios$section
keyratios$data[[1]]
keyratios$data[[2]]
keyratios$data[[2]]
library(data.table)
rbindlist(keyratios$data)
library(data.table)
allRatios = rbindlist(keyratios$data)
unique(allRatios$category)
allData = GetHTMLTables(myURL = 'https://finance.yahoo.com/quote/AAPL/analysis?p=AAPL')
allData[[1]] = NULL
allData
names(allData) <- c('EarningsEstimate','RevenueEstimate','EarningsHistory','EPSTrend','EPSRevisions','GrowthEstimates')
rbindlist(allData, idcol = T)
devtools::load_all(".")
source('R/Utilities.R')
source('R/EarningsDataExtraction.R')
allData = GetHTMLTables(myURL = 'https://finance.yahoo.com/quote/AAPL/analysis?p=AAPL')
allData[[1]] = NULL
allData
names(allData) <- c('EarningsEstimate','RevenueEstimate','EarningsHistory','EPSTrend','EPSRevisions','GrowthEstimates')
rbindlist(allData, idcol = T)
tail(allRatios)
indexConstituents = readRDS('R/indexConstituents.rds')
t(indexConstituents[1,])
data.frame(t(indexConstituents[1,]))
DT::renderDataTable(data.frame(t(indexConstituents[1,])))
